#!/usr/bin/env bpftrace

#include <linux/sched.h>

struct cfs_rq_partial {
	struct load_weight load;
	unsigned long runnable_weight;
	unsigned int nr_running;
	unsigned int h_nr_running;
};


tracepoint:sched:sched_migrate_task / cpu==2 || cpu==3 || cpu==6 || cpu==7 /
{
    //printf("migrate %17s  %d -> %d\n", comm, args->orig_cpu, args->dest_cpu);
    $diff = (args->orig_cpu - args->dest_cpu) * (args->orig_cpu - args->dest_cpu);
    if($diff == 16) {
        @migt[comm] = count();
    } else {
        @migc[comm] = count();
    }
}



//kretprobe:sched_slice*/ cpu==2 || cpu==3 || cpu==6 || cpu==7 /
//{
//    @slices[cpu] = lhist(retval, 0, 24000000, 3000000);
//}

//profile:hz:99 / cpu==2 || cpu==3 || cpu==6 || cpu==7 /
//{
//	$task = (struct task_struct *)curtask;
//	$my_q = (struct cfs_rq_partial *)$task->se.cfs_rq;
//
//    $wei = $my_q->runnable_weight;
//	@runqwei[cpu] = hist($wei);
//
//	$len = $my_q->nr_running;
//	$len = $len > 0 ? $len - 1 : 0;
//	@runqlen[cpu] = hist($len);
//}

interval:s:1 {
    //print(@slices);
    //clear(@slices);

    //print(@runqwei);
    //clear(@runqwei);

    //print(@runqlen);
    //clear(@runqlen);

    printf("\n");
    print(@migc);
    clear(@migc);
    //print(@migt);
    //clear(@migt);
}